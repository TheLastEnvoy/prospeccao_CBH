#!/usr/bin/env python3
"""
Script para corrigir nomes incorretos de munic√≠pios no banco de dados
"""

import sqlite3
import os
import sys
import re
from pathlib import Path

def detectar_problemas_codificacao():
    """Detecta automaticamente problemas de codifica√ß√£o nos nomes de munic√≠pios"""
    db_path = os.path.join('data', 'oscs_parana_novo.db')

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    print("üîç Detectando problemas de codifica√ß√£o...")

    # Buscar munic√≠pios com caracteres problem√°ticos
    cursor.execute("SELECT DISTINCT edmu_nm_municipio FROM oscs")
    todos_municipios = [row[0] for row in cursor.fetchall()]

    problemas_encontrados = {}

    for municipio in todos_municipios:
        # Verificar se h√° caracteres de escape ou codifica√ß√£o incorreta
        if ('\\x' in repr(municipio) or
            '√¢' in municipio or
            '√É' in municipio or
            len(municipio.encode('utf-8')) != len(municipio)):

            cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [municipio])
            count = cursor.fetchone()[0]

            # Tentar sugerir corre√ß√£o
            nome_sugerido = municipio

            # Corre√ß√µes conhecidas
            if '√Å√¢\x80\x9angulo' in repr(municipio):
                nome_sugerido = '√Çngulo'
            elif '√É' in municipio:
                nome_sugerido = municipio.replace('√É¬°', '√°').replace('√É¬©', '√©').replace('√É¬≠', '√≠').replace('√É¬≥', '√≥').replace('√É¬∫', '√∫').replace('√É¬ß', '√ß').replace('√É ', '√†')

            problemas_encontrados[municipio] = {
                'count': count,
                'sugestao': nome_sugerido,
                'repr': repr(municipio)
            }

    if problemas_encontrados:
        print(f"   Encontrados {len(problemas_encontrados)} munic√≠pios com problemas:")
        for municipio, info in problemas_encontrados.items():
            print(f"      {info['repr']} -> '{info['sugestao']}' ({info['count']} OSCs)")
    else:
        print("   ‚úÖ Nenhum problema de codifica√ß√£o detectado")

    conn.close()
    return problemas_encontrados

def backup_database():
    """Cria backup do banco antes das altera√ß√µes"""
    db_path = os.path.join('data', 'oscs_parana_novo.db')
    backup_path = os.path.join('data', 'oscs_parana_novo_backup.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return False
    
    try:
        # Copia o arquivo
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Backup criado: {backup_path}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return False

def verificar_municipios_antes():
    """Verifica os munic√≠pios que ser√£o alterados"""
    db_path = os.path.join('data', 'oscs_parana_novo.db')

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    print("üîç Verificando munic√≠pios que ser√£o corrigidos...")

    # Primeiro, vamos identificar munic√≠pios com problemas de codifica√ß√£o
    print("\nüîç Buscando munic√≠pios com problemas de codifica√ß√£o...")
    cursor.execute("SELECT DISTINCT edmu_nm_municipio FROM oscs WHERE edmu_nm_municipio LIKE '%\\x%' OR edmu_nm_municipio LIKE '%√¢%'")
    municipios_problematicos = [row[0] for row in cursor.fetchall()]

    if municipios_problematicos:
        print("   Munic√≠pios com problemas de codifica√ß√£o encontrados:")
        for municipio in municipios_problematicos:
            cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [municipio])
            count = cursor.fetchone()[0]
            print(f"      '{repr(municipio)}': {count} OSCs")

    # Munic√≠pios a serem corrigidos
    # Nota: Coronel Domingos Soares (com "s") √© o nome CORRETO
    correcoes = {
        "Diamante D'Oeste": 'Diamante do Oeste',
        '√Å√¢\x80\x9angulo': '√Çngulo'  # Corre√ß√£o de codifica√ß√£o
    }
    
    for nome_incorreto, nome_correto in correcoes.items():
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome_incorreto])
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"   üìç '{nome_incorreto}' -> '{nome_correto}': {count} OSCs")
        else:
            print(f"   ‚ö†Ô∏è '{nome_incorreto}': N√£o encontrado no banco")
    
    conn.close()
    return correcoes

def corrigir_municipios():
    """Executa as corre√ß√µes no banco de dados"""
    db_path = os.path.join('data', 'oscs_parana_novo.db')
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("\nüîß Executando corre√ß√µes...")
    
    # Corre√ß√µes a serem aplicadas
    # Nota: Coronel Domingos Soares (com "s") √© o nome CORRETO
    correcoes = {
        "Diamante D'Oeste": 'Diamante do Oeste',
        '√Å√¢\x80\x9angulo': '√Çngulo'  # Corre√ß√£o de codifica√ß√£o
    }
    
    total_alteracoes = 0
    
    for nome_incorreto, nome_correto in correcoes.items():
        print(f"\n   Corrigindo: '{nome_incorreto}' -> '{nome_correto}'")
        
        # Verificar quantos registros ser√£o afetados
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome_incorreto])
        count_antes = cursor.fetchone()[0]
        
        if count_antes == 0:
            print(f"      ‚ö†Ô∏è Nenhum registro encontrado para '{nome_incorreto}'")
            continue
        
        # Executar a corre√ß√£o
        cursor.execute(
            "UPDATE oscs SET edmu_nm_municipio = ? WHERE edmu_nm_municipio = ?",
            [nome_correto, nome_incorreto]
        )
        
        # Verificar se a corre√ß√£o funcionou
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome_correto])
        count_depois = cursor.fetchone()[0]
        
        # Verificar se ainda existem registros com o nome antigo
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome_incorreto])
        count_antigo = cursor.fetchone()[0]
        
        if count_antigo == 0 and count_depois >= count_antes:
            print(f"      ‚úÖ Sucesso: {count_antes} registros alterados")
            total_alteracoes += count_antes
        else:
            print(f"      ‚ùå Problema na corre√ß√£o:")
            print(f"         Antes: {count_antes}, Depois: {count_depois}, Restantes: {count_antigo}")
    
    # Commit das altera√ß√µes
    conn.commit()
    conn.close()
    
    print(f"\nüìä Total de registros alterados: {total_alteracoes}")
    return total_alteracoes

def verificar_municipios_depois():
    """Verifica os munic√≠pios ap√≥s as corre√ß√µes"""
    db_path = os.path.join('data', 'oscs_parana_novo.db')
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("\n‚úÖ Verificando resultado das corre√ß√µes...")
    
    # Verificar os nomes corretos
    nomes_corretos = [
        'Coronel Domingos Soares',  # Nome correto (com "s")
        'Diamante do Oeste',
        '√Çngulo'
    ]
    
    for nome in nomes_corretos:
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome])
        count = cursor.fetchone()[0]
        print(f"   üìç '{nome}': {count} OSCs")
    
    # Verificar se ainda existem nomes incorretos
    nomes_incorretos = [
        "Diamante D'Oeste",
        '√Å√¢\x80\x9angulo'
    ]
    
    print("\nüîç Verificando se nomes incorretos ainda existem...")
    for nome in nomes_incorretos:
        cursor.execute("SELECT COUNT(*) FROM oscs WHERE edmu_nm_municipio = ?", [nome])
        count = cursor.fetchone()[0]
        if count > 0:
            print(f"   ‚ö†Ô∏è '{nome}': {count} OSCs (ainda existe!)")
        else:
            print(f"   ‚úÖ '{nome}': 0 OSCs (corrigido)")
    
    conn.close()

def testar_api_depois():
    """Testa a API ap√≥s as corre√ß√µes"""
    print("\nüß™ Testando API ap√≥s corre√ß√µes...")
    
    try:
        import os
        import sys
        import django
        
        # Configurar Django
        sys.path.append('.')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dashboard_osc.settings')
        django.setup()
        
        from osc_dashboard.views import get_oscs_por_municipio
        
        dados = get_oscs_por_municipio()
        municipios_dict = {item['municipio']: item['total_oscs'] for item in dados}
        
        # Verificar os munic√≠pios corrigidos
        municipios_teste = [
            'Coronel Domingos Soares',  # Nome correto (com "s")
            'Diamante do Oeste',
            '√Çngulo'
        ]
        
        for municipio in municipios_teste:
            if municipio in municipios_dict:
                oscs = municipios_dict[municipio]
                print(f"   ‚úÖ API: '{municipio}': {oscs} OSCs")
            else:
                print(f"   ‚ùå API: '{municipio}': N√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro ao testar API: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 70)
    print("üîß CORRE√á√ÉO DE NOMES DE MUNIC√çPIOS NO BANCO DE DADOS")
    print("=" * 70)
    
    # 1. Criar backup
    print("\n1Ô∏è‚É£ Criando backup do banco de dados...")
    if not backup_database():
        print("‚ùå Falha ao criar backup. Abortando.")
        return False
    
    # 2. Detectar problemas de codifica√ß√£o
    print("\n2Ô∏è‚É£ Detectando problemas de codifica√ß√£o...")
    problemas_codificacao = detectar_problemas_codificacao()

    # 3. Verificar antes
    print("\n3Ô∏è‚É£ Verificando munic√≠pios antes das corre√ß√µes...")
    correcoes = verificar_municipios_antes()
    
    # 4. Confirmar com o usu√°rio
    print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Ser√£o alterados registros no banco de dados!")
    print(f"   Backup criado em: data/oscs_parana_novo_backup.db")
    if problemas_codificacao:
        print(f"   {len(problemas_codificacao)} problemas de codifica√ß√£o detectados")

    resposta = input("\nü§î Deseja continuar com as corre√ß√µes? (s/N): ").strip().lower()
    if resposta not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        return False

    # 5. Executar corre√ß√µes
    print("\n4Ô∏è‚É£ Executando corre√ß√µes...")
    total_alteracoes = corrigir_municipios()
    
    if total_alteracoes == 0:
        print("‚ö†Ô∏è Nenhuma altera√ß√£o foi feita.")
        return False
    
    # 6. Verificar depois
    print("\n5Ô∏è‚É£ Verificando resultado...")
    verificar_municipios_depois()

    # 7. Testar API
    print("\n6Ô∏è‚É£ Testando API...")
    api_ok = testar_api_depois()
    
    # 8. Resultado final
    print("\n" + "=" * 70)
    if api_ok and total_alteracoes > 0:
        print("‚úÖ CORRE√á√ïES APLICADAS COM SUCESSO!")
        print(f"   {total_alteracoes} registros alterados")
        print("   Nomes de munic√≠pios corrigidos no banco")
        print("   Problemas de codifica√ß√£o resolvidos")
        print("   API retornando dados corretos")
        print("   Mapa deve funcionar corretamente agora")
        print("\nüìç Munic√≠pios corrigidos:")
        print("   ‚Ä¢ Diamante D'Oeste ‚Üí Diamante do Oeste")
        print("   ‚Ä¢ √Å√¢\\x80\\x9angulo ‚Üí √Çngulo")
        print("\nüìù Nota: Coronel Domingos Soares (com 's') j√° estava correto no banco")
    else:
        print("‚ö†Ô∏è CORRE√á√ïES PARCIAIS OU COM PROBLEMAS")
        print("   Verifique os logs acima para detalhes")
    print("=" * 70)
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
