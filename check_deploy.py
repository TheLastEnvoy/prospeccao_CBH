#!/usr/bin/env python3
"""
Script para verificar se o projeto est√° pronto para deploy no Render
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - N√ÉO ENCONTRADO")
        return False

def check_file_content(file_path, required_content, description):
    """Verifica se um arquivo cont√©m conte√∫do espec√≠fico"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if required_content in content:
                print(f"‚úÖ {description}: OK")
                return True
            else:
                print(f"‚ùå {description}: Conte√∫do n√£o encontrado")
                return False
    except FileNotFoundError:
        print(f"‚ùå {description}: Arquivo n√£o encontrado")
        return False

def check_database():
    """Verifica o banco de dados"""
    db_path = "data/oscs_parana_novo.db"
    if os.path.exists(db_path):
        size = os.path.getsize(db_path)
        size_mb = size / (1024 * 1024)
        print(f"‚úÖ Banco de dados: {db_path} ({size_mb:.1f} MB)")
        return True
    else:
        print(f"‚ùå Banco de dados: {db_path} - N√ÉO ENCONTRADO")
        return False

def check_git_status():
    """Verifica status do Git"""
    try:
        import subprocess
        
        # Verificar se h√° mudan√ßas n√£o commitadas
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            if result.stdout.strip():
                print("‚ö†Ô∏è  Git: H√° mudan√ßas n√£o commitadas")
                print("   Execute: git add . && git commit -m 'Deploy ready'")
                return False
            else:
                print("‚úÖ Git: Todas as mudan√ßas commitadas")
                return True
        else:
            print("‚ö†Ô∏è  Git: N√£o √© um reposit√≥rio Git ou Git n√£o instalado")
            return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  Git: Comando git n√£o encontrado")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üîç VERIFICA√á√ÉO PR√â-DEPLOY PARA RENDER")
    print("=" * 60)
    
    checks = []
    
    # Verificar arquivos essenciais
    print("\nüìÅ Verificando arquivos essenciais...")
    checks.append(check_file_exists("render.yaml", "Configura√ß√£o Render"))
    checks.append(check_file_exists("build.sh", "Script de build"))
    checks.append(check_file_exists("requirements.txt", "Depend√™ncias Python"))
    checks.append(check_file_exists("manage.py", "Django manage.py"))
    checks.append(check_file_exists("dashboard_osc/settings.py", "Configura√ß√µes Django"))
    checks.append(check_file_exists("dashboard_osc/wsgi.py", "WSGI application"))
    
    # Verificar banco de dados
    print("\nüóÑÔ∏è Verificando banco de dados...")
    checks.append(check_database())
    
    # Verificar conte√∫do dos arquivos
    print("\nüìù Verificando conte√∫do dos arquivos...")
    checks.append(check_file_content("requirements.txt", "gunicorn", "Gunicorn em requirements.txt"))
    checks.append(check_file_content("requirements.txt", "whitenoise", "WhiteNoise em requirements.txt"))
    checks.append(check_file_content("dashboard_osc/settings.py", "ALLOWED_HOSTS", "ALLOWED_HOSTS configurado"))
    checks.append(check_file_content("build.sh", "collectstatic", "collectstatic no build.sh"))
    
    # Verificar estrutura de diret√≥rios
    print("\nüìÇ Verificando estrutura de diret√≥rios...")
    checks.append(check_file_exists("static", "Diret√≥rio static"))
    checks.append(check_file_exists("templates", "Diret√≥rio templates"))
    checks.append(check_file_exists("data", "Diret√≥rio data"))
    checks.append(check_file_exists("osc_dashboard", "App osc_dashboard"))
    
    # Verificar Git
    print("\nüîÑ Verificando Git...")
    git_ok = check_git_status()
    
    # Resumo
    print("\n" + "=" * 60)
    passed = sum(checks)
    total = len(checks)
    
    if passed == total and git_ok:
        print("üéâ PROJETO PRONTO PARA DEPLOY!")
        print(f"   ‚úÖ {passed}/{total} verifica√ß√µes passaram")
        print("   ‚úÖ Git status OK")
        print("\nüöÄ Pr√≥ximos passos:")
        print("   1. Fa√ßa push para o reposit√≥rio remoto")
        print("   2. Acesse render.com e crie um novo Web Service")
        print("   3. Conecte seu reposit√≥rio")
        print("   4. O Render detectar√° render.yaml automaticamente")
    else:
        print("‚ùå PROJETO N√ÉO EST√Å PRONTO!")
        print(f"   ‚ùå {passed}/{total} verifica√ß√µes passaram")
        if not git_ok:
            print("   ‚ùå Git status com problemas")
        print("\nüîß Corrija os problemas acima antes do deploy")
    
    print("=" * 60)
    
    return passed == total and git_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
